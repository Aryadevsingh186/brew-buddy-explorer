
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ejrrbosdtwtissxqiczm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqcnJib3NkdHd0aXNzeHFpY3ptIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNTE0MTIsImV4cCI6MjA1ODkyNzQxMn0.Z77sOaNN1KFjdJi4WIdZfajw2qs_y5vLXDYCsdy2B5E";

// Create a storage bucket for avatars if it doesn't exist
// This operation will be performed when the client initializes
(async () => {
  const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
  
  try {
    // Check if the storage bucket exists, if not create it
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('Error checking buckets:', bucketsError);
      return;
    }
    
    const avatarBucketExists = buckets?.some(bucket => bucket.name === 'avatars');
    
    if (!avatarBucketExists) {
      const { error: createError } = await supabase.storage.createBucket('avatars', {
        public: true,
        fileSizeLimit: 1024 * 1024, // 1MB
        allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
      });
      
      if (createError) {
        console.error('Error creating avatars bucket:', createError);
      } else {
        console.log('Created avatars bucket');
      }
    }
  } catch (err) {
    console.error('Error initializing storage:', err);
  }
})();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a SupabaseClient with custom types
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    }
  }
);
